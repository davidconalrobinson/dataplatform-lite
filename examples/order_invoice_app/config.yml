---
# Database connection parameters
username: 'postgres'
password: 'postgres'
host: 'db_infra'
database: 'dataplatform-lite-db'
# API secrets and users
secret_key: 09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7
users:
  peter:
    username: 'peter'
    full_name: 'Peter Parker'
    email: 'peterparker@marvel.com'
    hashed_password: '$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW'
    disabled: False
    access_tier: 1
  diana:
    username: 'diana'
    full_name: 'Diana Prince'
    email: 'dianaprince@dc.com'
    hashed_password: '$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW'
    disabled: False
    access_tier: 2
# Database objects
objects:
  customers:
    description: This table contains one row per customer
    api:
      - post
    access_tier: 1
    columns:
      id:
        dtype: 'String'
        description: 'Unique customer identifier'
        pii: False
        primary_key: True
      name:
        description: 'Name of customer'
        dtype: 'String'
        pii: True
      phone_no:
        description: 'Customer phone number'
        dtype: 'String'
        pii: True
      address:
        description: 'Address of customer'
        dtype: 'String'
        pii: True
  orders:
    description: This table contains one row per order
    api:
      - get
      - post
    access_tier: 2
    columns:
      id:
        dtype: 'String'
        description: 'Unique order identifier'
        pii: False
        primary_key: True
      customer_id:
        dtype: 'String'
        description: 'Unique customer identifier'
        pii: False
      product:
        description: 'The product that has been ordered'
        dtype: 'String'
        pii: False
      quantity:
        description: 'Quantity ordered'
        dtype: 'Integer'
        pii: False
      price_per_unit:
        description: 'The per-unit price for this product'
        dtype: 'Numeric'
        pii: False
  invoices:
    description: This table contains one row per invoice
    api:
      - get
    access_tier: 1
    columns:
      id:
        dtype: 'String'
        description: 'Unique invoice identifier'
        pii: False
        primary_key: True
      order_id:
        dtype: 'String'
        description: 'Unique order identifier'
        pii: False
      name:
        description: 'Name of customer'
        dtype: 'String'
        pii: True
      address:
        description: 'Address of customer'
        dtype: 'String'
        pii: True
      amount_payable:
        description: 'Amount payable'
        dtype: 'Numeric'
        pii: False
# Database trigger functions
trigger_functions:
  - |
    CREATE OR REPLACE FUNCTION db.generate_invoice()
    RETURNS TRIGGER AS
    $$
      BEGIN
        INSERT INTO db.invoices (id, order_id, name, address, amount_payable)
        SELECT
          uuid_generate_v1() AS id,
          orders.id AS order_id,
          customers.name,
          customers.address,
          orders.quantity*orders.price_per_unit AS amount_payable
        FROM (SELECT NEW.*) orders
        INNER JOIN db.customers customers
        ON orders.customer_id = customers.id
        ON CONFLICT DO NOTHING;
        RETURN NULL;
      EXCEPTION WHEN OTHERS THEN
        RETURN NULL; -- Do nothing.
      END;
    $$
    LANGUAGE PLPGSQL;
    DROP TRIGGER IF EXISTS generate_invoice ON db.orders;
    CREATE TRIGGER generate_invoice
    AFTER INSERT ON db.orders
    FOR EACH ROW EXECUTE PROCEDURE db.generate_invoice();
